cmake_minimum_required(VERSION 3.14)
project(OrderCache VERSION 1.0 LANGUAGES CXX)

# Set C++ standard to C++17 as required by the assignment
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Add compiler flags for optimization in Release mode
if(CMAKE_BUILD_TYPE STREQUAL "Release")
  if(CMAKE_CXX_COMPILER_ID MATCHES "GNU|Clang")
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O3")
  elseif(MSVC)
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /O2")
  endif()
endif()

# Use FetchContent to download and build Google Test
include(FetchContent)
FetchContent_Declare(
  googletest
  URL https://github.com/google/googletest/archive/03597a01ee50f33f9afd640b68c67bc21131277d.zip
)
# For Windows: Prevent overriding the parent project's compiler/linker settings
set(gtest_force_shared_crt ON CACHE BOOL "" FORCE)
FetchContent_MakeAvailable(googletest)

# Source files
set(SOURCES
    OrderCache.cpp
    OrderCacheTest.cpp
)

# Add the executable
add_executable(OrderCacheTest ${SOURCES})

# Link against Google Test
target_link_libraries(OrderCacheTest
    gtest_main
)

# Enable testing
enable_testing()
add_test(NAME OrderCacheTest COMMAND OrderCacheTest)

# Installation rules (optional)
install(TARGETS OrderCacheTest DESTINATION bin)

# Print configuration summary
message(STATUS "CMake version: ${CMAKE_VERSION}")
message(STATUS "C++ compiler: ${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER_VERSION}")
message(STATUS "Build type: ${CMAKE_BUILD_TYPE}")